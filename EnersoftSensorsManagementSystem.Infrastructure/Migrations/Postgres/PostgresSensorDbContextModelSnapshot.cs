// <auto-generated />
using EnersoftSensorsManagementSystem.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EnersoftSensorsManagementSystem.Infrastructure.Migrations.Postgres
{
    [DbContext(typeof(PostgresSensorDbContext))]
    partial class PostgresSensorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EnersoftSensorsManagementSystem.Core.Entities.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Sensors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Location = "Greenhouse 1",
                            Name = "ESP32 Dev Board",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Location = "Field A",
                            Name = "Soil Moisture Probe",
                            TypeId = 2
                        });
                });

            modelBuilder.Entity("EnersoftSensorsManagementSystem.Core.Entities.SensorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("SensorTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ESP Module"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Soil Moisture Sensor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Raspberry Camera"
                        },
                        new
                        {
                            Id = 4,
                            Name = "DHT11 Temperature and Humidity Sensor"
                        });
                });

            modelBuilder.Entity("EnersoftSensorsManagementSystem.Core.Entities.Sensor", b =>
                {
                    b.HasOne("EnersoftSensorsManagementSystem.Core.Entities.SensorType", "Type")
                        .WithMany("Sensors")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("EnersoftSensorsManagementSystem.Core.Entities.SensorType", b =>
                {
                    b.Navigation("Sensors");
                });
#pragma warning restore 612, 618
        }
    }
}
